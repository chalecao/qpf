uniform float elapsedTime;

uniform vec2 turbulence;
uniform float persistence;

varying vec2 vUv;

{{snoiseFragShader}}

float fBm_noise(vec2 x){
	float y = snoise(x);
	y += snoise(2.0 * x) * pow(persistence, 2.0);
	y += snoise(4.0 * x) * pow(persistence, 4.0);
	y += snoise(8.0 * x) * pow(persistence, 8.0);
	return y/1.875;
}

void main()
{
	vec2 p = (vUv * 2.0 -1.0) * 2.0;
	p.x += sin(elapsedTime * turbulence.x);
	p.y += cos(elapsedTime * turbulence.y);

	vec3 f = vec3(0.0);
	f.x = fBm_noise(p);
	f.y = fBm_noise(p + 79.263);
	f.z = fBm_noise(p + 108.54);

	gl_FragColor = vec4(f, 1.0);
}