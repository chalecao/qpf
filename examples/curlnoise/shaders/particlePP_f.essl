uniform float particleTextureSize;
uniform float noiseTextureSize;
uniform float deltaTime;
uniform float elapsedTime;

uniform sampler2D noiseTexture;
uniform sampler2D spawnTexture;
uniform sampler2D particleTexture;

varying vec2 vUv;

void main(){
	vec4 particle = texture2D(particleTexture, vUv);

	if(particle.w > 0.0){
		vec3 p = particle.xyz * 0.5 + 0.5;		//??????
		float d = 1.0 / noiseTextureSize;

		float fx = texture2D(noiseTexture, p.yz).x;
		float fy = texture2D(noiseTexture, p.xz).y;
		float fz = texture2D(noiseTexture, p.xy).z;

		float fxdy = texture2D(noiseTexture, p.yz + vec2(d, 0)).x - fx;
		float fxdz = texture2D(noiseTexture, p.yz + vec2(0, d)).x - fx;

		float fydx = texture2D(noiseTexture, p.xz + vec2(d, 0)).y - fy;
		float fydz = texture2D(noiseTexture, p.xz + vec2(0, d)).y - fy;

		float fzdx = texture2D(noiseTexture, p.xy + vec2(d, 0)).z - fz;
		float fzdy = texture2D(noiseTexture, p.xy + vec2(0, d)).z - fz;

		vec3 v = vec3(fzdy - fydz, fxdz - fzdx, fydx - fxdy) * 0.005 * noiseTextureSize;

		particle.xyz += v * deltaTime;
		particle.w -= deltaTime;
	}
	else{
		particle = texture2D(spawnTexture, vUv);
	}

	gl_FragColor = particle;
}